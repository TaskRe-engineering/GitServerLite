#!/bin/bash

#for debugging
#set -ex

#
# Copyright Â© 2023 Task Re-engineering Inc.
# All rights reserved.
# 
# This source code is licensed under the [] license found in the
# LICENSE file in the root directory of this source tree. 
#

process() {
        GIT_DIR="$1"
        DEPLOY_DIR="$2"
        PARAMS="$3"
        BRANCH="$4"
        ENV_FILE="$5"

        local RESULT=""

        if [[ ! -z "$BRANCH" ]];
        then
                TARGET="$DEPLOY_DIR/deploy_$BRANCH"
                CHECKOUT="$(checkout $GIT_DIR $BRANCH $TARGET)"
                DEPLOY="$(deploy $TARGET $PARAMS $ENV_FILE)"
                RESULT="$CHECKOUT;$DEPLOY"
        fi

        echo "$RESULT"
}

match() {
        ref="$1"
        BRANCHES="$2"

        local MATCH=""

        for BRANCH_LOCATION in "${BRANCHES[@]}"
        do
                BRANCH="$(branch $BRANCH_LOCATION)"

                if [[ "$ref" = "refs/heads/$BRANCH" ]];
                then
                        MATCH="$BRANCH_LOCATION"
                fi
        done

        echo "$MATCH"
}

checkout() {
        GIT_DIR="$1"
        BRANCH="$2"
        TARGET="$3"

        if [[ -z "$GIT_DIR" || -z "$BRANCH" || -z "$TARGET" ]];
        then
                exit 1
        fi
        
        CHECKOUT_CMD="mkdir -p "$TARGET"; git --work-tree="$TARGET" --git-dir="$GIT_DIR" checkout -f "$BRANCH""
        RESULT="$(_run "$CHECKOUT_CMD")"
        echo "$RESULT"
}

deploy() {
        TARGET="$1"
        PARAMS="$2"
        ENV_FILE="$3"

        if [[ -z "$TARGET" || -z "$PARAMS" ]];
        then
                exit 1
        fi

        if [[ -z "$ENV_FILE" ]];
        then
                DEPLOY_CMD="cd "$TARGET"; docker compose up $PARAMS"
        else
                DEPLOY_CMD="cd "$TARGET"; docker compose --env-file "$ENV_FILE" up $PARAMS"
        fi
        
        RESULT="$(_run "$DEPLOY_CMD")"
        echo "$RESULT"
}

read() {
        BRANCH_LOCATION="$1"

        source "$BRANCH_LOCATION"
}

branch() {
        BRANCH_LOCATION="$1"
        DEPLOY_BRANCHES_DIR="$2"
        
        if [[ -z "$BRANCH_LOCATION" ]];
        then
                exit 1
        fi
        
        RAW_BRANCH="${BRANCH_LOCATION#$DEPLOY_BRANCHES_DIR}"
        
        if [[ $RAW_BRANCH == /* ]];
        then
                echo "${RAW_BRANCH:1}"
        else
                echo "$RAW_BRANCH"
        fi
}

_run() {
        COMMAND="$1"

        if [[ -z "$COMMAND" ]];
        then
                exit 1
        fi

        eval "$COMMAND"
        echo "$COMMAND"
}