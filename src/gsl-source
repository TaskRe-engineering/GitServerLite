#!/usr/bin/env bash

#
# Copyright 2023 Task Re-engineering Inc.
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# 

#for debugging
#set -ex

branch() {
    branch_location="$1"

    if [[ -z "$branch_location" ]];
    then
        exit 1
    fi

    raw_branch="${branch_location#$GSL_DEPLOY_BRANCHES_DIR}"

    if [[ $raw_branch == /* ]];
    then
        printf "${raw_branch:1}"
    else
        printf "$raw_branch"
    fi
}

match() {
    ref="$1"

    match=""

    for branch_location in "${GSL_BRANCHES[@]}"
    do
        branch="$(branch $branch_location)"

        if [[ "$ref" = "refs/heads/$branch" ]];
        then
            match="$branch_location"
        fi
    done

    printf "$match"
}

validate_branch_name() {
    branch_name="$1"

    if [[ "$branch_name" =~ [^a-zA-Z0-9] ]];
    then
        exit 64
    fi
}

process() {
    git_dir="$1"
    deploy_dir="$2"
    params="$3"
    branch="$4"
    env_file="$5"

    if [[ -z "$git_dir" || -z "$deploy_dir" || -z "$params" || -z "$branch" ]];
    then
        exit 1
    fi
    
    target="$deploy_dir/deploy_$branch"
    run_command="checkout "$git_dir" "$branch" "$target"; deploy "$target" \""$params"\" "$env_file""
    _run "$run_command"
}

deploy() {
    target="$1"
    params="$2"
    env_file="$3"

    if [[ -z "$target" || -z "$params" ]];
    then
        exit 1
    fi

    if [[ -z "$env_file" ]];
    then
        printf "Running Docker compose up. No environment file specified, so \".env\" will be used if it exists.\n"
        run_command="cd "$target"; docker compose up $params"
    else
        printf "Running Docker compose up with environment file \"%s\".\n" "$env_file"
        run_command="cd "$target"; docker compose --env-file "$env_file" up $params"
    fi
    
    _run "$run_command"
}

get_branches() {
    GSL_BRANCHES=("$GSL_DEPLOY_BRANCHES_DIR"/*)
}

create_branch_file() {
    branch_name="$1"
    env_file="$2"

    file="$GSL_DEPLOY_BRANCHES_DIR/$branch_name"

    printf "# Deploy branch record for branch \"%s\"\n" "$branch_name" > "$file"
    
    if [[ ! -z "$env_file" ]];
    then
        printf "env_file=%s\n" "$env_file" >> "$file"
    else
        printf "# No env-file specified. \".env\" will be used if it exists, otherwise none will be used.\n" >> "$file"
    fi

    printf "Deploy record for branch \"%s\" successfully created.\n" "$branch_name"
}

remove_branch_file() {
    file="$1"

    if [[ ! -f "$file" ]];
    then
        exit 65
    fi

    rm -f "$file"

    printf "Deploy record for branch \"%s\" successfully removed.\n" "$branch_name"
}

load_branch_file() {
    branch_location="$1"

    . "$branch_location"
}

checkout() {
    git_dir="$1"
    branch="$2"
    target="$3"

    if [[ -z "$git_dir" || -z "$branch" || -z "$target" ]];
    then
        exit 1
    fi
    
    run_command="mkdir -p "$target"; git --work-tree="$target" --git-dir="$git_dir" checkout -f "$branch""
    _run "$run_command"
}

print_invalid_command() {
    printf "Invalid: invalid command.\n"
    display_manual
}

handle_exit() {
    exit_status="$1"

    if [[ $exit_status -ne 0 ]];
    then
        if [[ $exit_status -eq 64 ]];
        then
            printf "Error: branch name must be alphanumeric.\n"
        elif [[ $exit_status -eq 65 ]];
        then
            printf "Error: branch not found.\n"
        else
            print_invalid_command
        fi
    fi
}

display_manual() {
    [ "$*" ] && printf "$0: $*"
    sed -n '/^##/,/^$/s/^## \{0,1\}//p' "$0"
}

add_branch() {
    branch_name="$1"

    if [[ -z "$branch_name" ]];
    then
        exit 1
    fi

    validate_branch_name "$branch_name"
    
    printf "Enter the .env file name: (optional)\n"
    read -e env_file

    run_command="create_branch_file "$branch_name" "$env_file""
    _run "$run_command"
}

remove_branch() {
    branch_name="$1"

    if [[ -z "$branch_name" ]];
    then
        exit 1
    fi

    file="$GSL_DEPLOY_BRANCHES_DIR/$branch_name"

    run_command="remove_branch_file "$file""
    _run "$run_command"
}

list() {
    if [[ ${#GSL_BRANCHES[@]} == 0 ]];
    then
        printf "There are no deploy branch records configured.\n"
    fi

    for branch_location in "${GSL_BRANCHES[@]}"
    do
        printf "$(branch "$branch_location" "$GSL_DEPLOY_BRANCHES_DIR")\n"
    done
}

show_branch() {
    branch_name="$1"

    if [[ -z "$branch_name" ]];
    then
        exit 1
    fi

    branch_location="$GSL_DEPLOY_BRANCHES_DIR/$branch_name"

    if [[ ! -f "$branch_location" ]];
    then
        exit 65
    fi

    printf "Displaying record for deploy branch \"%s\":\n" "$branch_name"
    printf "==== START ====\n"
    cat "$branch_location"
    printf "===== END =====\n\n"
}

show_deploy_directory() {
    printf "%s/\n" "$GSL_DEPLOY_DIR"
}

show_version() {
    printf "gitserverlite version %s\n" "$GSL_VERSION"
}

run_selection() {
    command="$1"
    argument1="$2"

    run_command=""
    if [[ "$command" = "help" ]];
    then
        run_command="display_manual"
    elif [ "$command" = "add-branch" ];
    then
        run_command="add_branch "$argument1""
    elif [ "$command" = "remove-branch" ];
    then
        run_command="remove_branch "$argument1""
    elif [ "$command" = "list" ];
    then
        run_command="list"
    elif [ "$command" = "show-branch" ];
    then
        run_command="show_branch "$argument1""
    elif [ "$command" = "show-deploy-location" ];
    then
        run_command="show_deploy_directory"
    elif [ "$command" = "version" ];
    then
        run_command="show_version"
    else
        exit 1
    fi
    
    _run "$run_command"
}

_run() {
    run_command="$1"

    if [[ -z "$run_command" ]];
    then
        exit 1
    fi

    eval "$run_command"
}
