#!/bin/bash

#for debugging
#set -ex

#
# Copyright Â© 2023 Task Re-engineering Inc.
# All rights reserved.
# 
# This source code is licensed under the [] license found in the
# LICENSE file in the root directory of this source tree. 
#

process() {
        GIT_DIR=$1
        DEPLOY_DIR=$2
        PARAMS=$3
        BRANCH=$4
        ENV_FILE=$5

        RESULT=""

        if [[ ! -z "$BRANCH" ]];
        then
                TARGET="$DEPLOY_DIR/deploy_$BRANCH"
                CHECKOUT="$(checkout $GIT_DIR $BRANCH $TARGET)"
                DEPLOY="$(deploy $TARGET $PARAMS $ENV_FILE)"
                RESULT="$CHECKOUT;$DEPLOY"
        else

        echo "$RESULT"
}

match() {
        ref=$1
        BRANCHES=$2

        MATCH=""

        for BRANCH_LOCATION in "${BRANCHES[@]}"
        do
                BRANCH="$(_get_branch_from_location $BRANCH_LOCATION)"

                if [[ "$ref" = "refs/heads/$BRANCH" ]];
                then
                        MATCH="$BRANCH_LOCATION"
                fi
        done

        echo "$MATCH"
}

deploy() {
        TARGET=$1
        PARAMS=$2
        ENV_FILE=$3

        if [[ -z "$ENV_FILE" ]];
        then
                COMMAND="$($_docker_compose_up_without_env $TARGET $PARAMS)"
        else
                COMMAND="$($_docker_compose_up_with_env $TARGET $PARAMS $ENV_FILE)"
                (cd $TARGET; eval $COMMAND)
        fi
        
        echo "$COMMAND"
}

read_branch_record() {
        BRANCH_LOCATION=$1

        source $BRANCH_LOCATION
}

_git_checkout() {
        GIT_DIR=$1
        BRANCH=$2
        TARGET=$3
        
        COMMAND="git --work-tree=$TARGET --git-dir=$GIT_DIR checkout -f $BRANCH"
        (mkdir -p $TARGET; eval $COMMAND)
        echo "$COMMAND"
}

_docker_compose_up_without_env() {
        TARGET=$1
        PARAMS=$2
        
        COMMAND="docker compose up $PARAMS"
        (cd $TARGET; eval $COMMAND)
        echo $COMMAND
}

_docker_compose_up_with_env() {
        TARGET=$1
        PARAMS=$2
        ENV_FILE=$3

        COMMAND="docker compose --env-file $ENV_FILE up $PARAMS"
        (cd $TARGET; eval $COMMAND)
        echo $COMMAND
}

_get_branch_from_location() {
        BRANCH_LOCATION=$1

        BRANCH=""
        
        if [[ -z $BRANCH_LOCATION ]];
        then
                exit 1
        else
                BRANCH="$(basename $BRANCH_LOCATION)"
        fi

        echo "$BRANCH"
}
