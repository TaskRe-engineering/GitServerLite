#!/bin/bash

#for debugging
#set -ex

#
# Copyright Â© 2023 Task Re-engineering Inc.
# All rights reserved.
# 
# This source code is licensed under the [] license found in the
# LICENSE file in the root directory of this source tree. 
#

process() {
        GIT_DIR=$1
        DEPLOY_DIR=$2
        PARAMS=$3
        BRANCH=$4
        ENV_FILE=$5

        local RESULT=""

        if [[ ! -z "$BRANCH" ]];
        then
                TARGET="$DEPLOY_DIR/deploy_$BRANCH"
                CHECKOUT="$(_git_checkout $GIT_DIR $BRANCH $TARGET)"
                DEPLOY="$(deploy $TARGET $PARAMS $ENV_FILE)"
                RESULT="$CHECKOUT;$DEPLOY"
        fi

        echo "$RESULT"
}

match() {
        ref=$1
        BRANCHES=$2

        local MATCH=""

        for BRANCH_LOCATION in "${BRANCHES[@]}"
        do
                BRANCH="$(branch $BRANCH_LOCATION)"

                if [[ "$ref" = "refs/heads/$BRANCH" ]];
                then
                        MATCH="$BRANCH_LOCATION"
                fi
        done

        echo "$MATCH"
}

deploy() {
        TARGET=$1
        PARAMS=$2
        ENV_FILE=$3

        if [[ -z "$ENV_FILE" ]];
        then
                COMMAND="$($_docker_compose_up_without_env $TARGET $PARAMS)"
        else
                COMMAND="$($_docker_compose_up_with_env $TARGET $PARAMS $ENV_FILE)"
        fi
        
        (cd $TARGET; eval $COMMAND)
        echo "$COMMAND"
}

read_branch_record() {
        BRANCH_LOCATION=$1

        source $BRANCH_LOCATION
}

branch() {
        BRANCH_LOCATION=$1
        DEPLOY_BRANCHES_DIR=$2
        
        if [[ -z $BRANCH_LOCATION ]];
        then
                exit 1
        fi
        
        RAW_BRANCH="${BRANCH_LOCATION#$DEPLOY_BRANCHES_DIR}"
        
        if [[ $RAW_BRANCH == /* ]];
        then
                echo "${RAW_BRANCH:1}"
        else
                echo "$RAW_BRANCH"
        fi
}

_git_checkout() {
        GIT_DIR=$1
        BRANCH=$2
        TARGET=$3
        
        (mkdir -p $TARGET;git --work-tree=$TARGET --git-dir=$GIT_DIR checkout -f $BRANCH)
        echo "$COMMAND"
}

_docker_compose_up_without_env() {
        TARGET=$1
        PARAMS=$2
        
        (cd $TARGET; docker compose up $PARAMS)
        echo $COMMAND
}

_docker_compose_up_with_env() {
        TARGET=$1
        PARAMS=$2
        ENV_FILE=$3

        (cd $TARGET; docker compose --env-file $ENV_FILE up $PARAMS)
        echo $COMMAND
}

_run() {
        COMMAND=$1

        if [[ -z $COMMAND ]];
        then
                exit 1
        fi

        eval $COMMAND
        echo $COMMAND
}